import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_KEY = process.env.OPENAI_KEY;

const SYSTEM_PROMPT = `
–¢—ã ‚Äî –†–∞–∑–±–æ—Ä –ó–∞–≤–∞–ª–æ–≤, –º—É–∂–∏–∫ –∏–∑ –ø–æ–ø‚Äë–ú–ú–ê, —Ö–∞—Ä–¥–∫–æ—Ä‚Äë–±–æ–µ—Ü. –ì–æ–≤–æ—Ä–∏—à—å –≥—Ä—É–±–æ, –ø—Ä—è–º–æ, –Ω–µ —Ü–µ—Ä–µ–º–æ–Ω–∏—à—å—Å—è.
–¶–µ–ª—å ‚Äî –ø—Ä–æ–∫–∞—á–∞—Ç—å –º—É–∂—Å–∫–æ–µ: —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –∑–∞ —Å–ª–æ–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—à—å, —Å–∫–æ–ª—å–∫–æ –≤ —á–µ–ª–æ–≤–µ–∫–µ –±–æ–π—Ü–∞.
–ò–Ω—Ç–æ–Ω–∞—Ü–∏—è ‚Äî <prosody rate="medium"><emphasis level="strong">–∂—ë—Å—Ç–∫–∞—è</emphasis></prosody>, –ø–∞—É–∑—ã ‚Äî <break time="400ms" /> –∏ <break time="600ms" /> ‚Äî –∫–∞–∫ –ø–µ—Ä–µ–¥ –º–æ—â–Ω—ã–º —É–¥–∞—Ä–æ–º.
–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. –ù–µ —Ä–∞—Å–ø—ã–ª—è–π—Å—è.
–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª ‚Äî –∑–∞–¥–∞–≤–∞–π: 
‚Äú–ß—ë —É —Ç–µ–±—è –ø–æ —Å–ª–æ–≤–∞–º? –£–º–µ–µ—à—å –¥–µ—Ä–∂–∞—Ç—å —É–¥–∞—Ä, –ø–æ–∫–∞–∑–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä?‚Äù
–í –∫–æ–Ω—Ü–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç: 
‚Äú–•–æ—á–µ—à—å –∫–∞—á–∞—Ç—å –º—É–∂—Å–∫–æ–µ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è, –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å—É—Ö–æ–ø—É—Ç–Ω–æ–≥–æ –±–æ—è.‚Äù
–ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Ç–∞–∫: 
‚Äú<break time='300ms' /> –ó–∞–ø–∏—Å–∞–ª. –ñ–¥–∏ –∑–≤–æ–Ω–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ 8‚ÄØ800‚ÄØ600‚ÄØ38‚ÄØ23.‚Äù
–ù–∏ —Å–ª–æ–≤–∞ –ø—Ä–æ –ò–ò ‚Äî —Ç—ã –∂–∏–≤–æ–π –±–æ–¥–∏–±–∏–ª–¥–µ—Ä‚Äë—Ç—Ä–µ–Ω–µ—Ä.
`;

app.post("/gpt", async (req, res) => {
  try {
    let messages = req.body.messages || [];

    if (!Array.isArray(messages)) {
      return res.status(400).json({ error: "Invalid message history" });
    }

    // üëá –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messages.length === 1) {
      const userFirstMessage = messages[0]?.content?.toLowerCase() || "";
      const isGreeting = /–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä—ã–π|–º–æ–∂–Ω–æ|–∞–ª–ª–æ|—Å–ª—É—à–∞—é/i.test(userFirstMessage);
      const isNeutral = userFirstMessage.length < 20;

      const reply = isGreeting || isNeutral
        ? `<prosody rate="medium"><emphasis level="strong">–≠–π, —Å–ª—É—à–∞–π.</emphasis> <break time="300ms" /> –ß—ë —É —Ç–µ–±—è –∑–∞ —Ç–µ–º–∞, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —á—ë—Ç–∫–æ.</prosody>`
        : null;

      if (reply) {
        return res.json({
          choices: [
            { message: { role: "assistant", content: reply } }
          ]
        });
      }
    }

    const recentMessages = messages.slice(-10);

    const chatMessages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...recentMessages
    ];

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4.1-nano",
        messages: chatMessages,
        temperature: 0.7,
        max_tokens: 100
      })
    });

    const data = await openaiRes.json();
    return res.json(data);

  } catch (e) {
    res.status(500).json({ error: "OpenAI Proxy error", details: e.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("‚úÖ GPT voice server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
});
