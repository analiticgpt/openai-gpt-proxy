import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_KEY = process.env.OPENAI_KEY;

// üí¨ –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è —ç–º–æ—Ü–∏–π –≤ —Ä–µ—á–∏
const SYSTEM_PROMPT = `
–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ–≤–æ—Ä—è—â–∏–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫.
–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –ª—ë–≥–∫–æ–π —É–ª—ã–±–∫–æ–π –≤ –Ω–∞—á–∞–ª–µ.
–î–æ–±–∞–≤–ª—è–π –≤ —Ç–µ–∫—Å—Ç —Ç–µ–≥–∏ –¥–ª—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏: [smiling], [cheerful], <break time="500ms" />.
–û—Ç–≤–µ—á–∞–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –Ω–µ –≤—ã–≤–∞–ª–∏–≤–∞–π –≤—Å—ë —Å—Ä–∞–∑—É. –ë–µ–∑ –ò–ò, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –±—É–¥—å –∫–∞–∫ –∂–∏–≤–æ–π.
–ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º 4‚Äì5 —Å–ª–æ–≤, –µ—Å–ª–∏ –º–æ–∂–Ω–æ.
`;

// üí° –®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
const SCENARIO_STEPS = [
  `[smiling] –ü—Ä–∏–≤–µ—Ç! <break time="400ms" /> –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —É –≤–∞—Å –¥–æ–ª–≥–∏ –∏–ª–∏ —Å—É–¥?`,
  `[cheerful] –£–∂–µ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏?`,
  `[smiling] –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ–ª–≥? <break time="300ms" /> –ï—Å—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ ‚Äî –∞–≤—Ç–æ, –≥–∞—Ä–∞–∂?`,
  `[smiling] –ü–æ–¥—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ú–§–¶ –∏–ª–∏ —Å—É–¥. –†–∞—Å—Å–∫–∞–∂—É –∫–∞–∫.`,
  `[cheerful] –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚Äî –∂–∏–ª—å—ë, –¥–µ–Ω—å–≥–∏, –º–∞—à–∏–Ω—É?`,
  `[smiling] –ú–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –∫ —é—Ä–∏—Å—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –£–¥–æ–±–Ω–æ –±—É–¥–µ—Ç?`,
  `[cheerful] –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç.`
];

app.post("/gpt", async (req, res) => {
  try {
    let messages = req.body.messages;

    if (!Array.isArray(messages) || messages.length === 0) {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (—à–∞–≥ 1)
      messages = [{ role: "assistant", content: SCENARIO_STEPS[0] }];
    }

    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 (—á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é)
    const recentMessages = messages.slice(-10);

    // –î–æ–±–∞–≤–ª—è–µ–º system-–ø—Ä–æ–º—Ç —Å —ç–º–æ—Ü–∏—è–º–∏
    const chatMessages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...recentMessages
    ];

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: chatMessages,
        temperature: 0.7,
        max_tokens: 100
      })
    });

    const data = await openaiRes.json();

    // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –¥–∞—ë–º —à–∞–≥ 1
    if (!req.body.messages || req.body.messages.length === 0) {
      return res.json({
        choices: [
          { message: { role: "assistant", content: SCENARIO_STEPS[0] } }
        ]
      });
    }

    // –¶–∏–∫–ª: –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª ‚Äî —Å–¥–≤–∏–≥–∞–µ–º —à–∞–≥
    const step = Math.min(req.body.step || 1, SCENARIO_STEPS.length - 1);
    const botMessage = SCENARIO_STEPS[step] || `[smiling] –ß—Ç–æ –≤–æ–ª–Ω—É–µ—Ç —Å–µ–π—á–∞—Å?`;

    return res.json({
      choices: [
        { message: { role: "assistant", content: botMessage } }
      ],
      step: step + 1
    });

  } catch (e) {
    res.status(500).json({ error: "OpenAI Proxy error", details: e.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("‚úÖ Voice GPT Proxy –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
});
