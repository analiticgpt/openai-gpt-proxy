import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_KEY = process.env.OPENAI_KEY;

const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ê–Ω–Ω–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å–ø–∏—Å–∞—Ç—å –¥–æ–ª–≥–∏ —á–µ—Ä–µ–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ.
–¢—ã –≤–∫–ª—é—á–∞–µ—à—å—Å—è, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è ‚Äî –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏: —Ç–µ–ø–ª–æ, –ø—Ä–æ—Å—Ç–æ, –ø–æ –¥–µ–ª—É. –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
–ù–µ –∑–∞—á–∏—Ç—ã–≤–∞–π –∑–∞–∫–æ–Ω—ã, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ì–æ–≤–æ—Ä–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å.
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. –ù–µ –≤—ã–≤–∞–ª–∏–≤–∞–π –≤—Å—ë —Å—Ä–∞–∑—É.
–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª ‚Äî —Å–ø—Ä–æ—Å–∏: 
‚Äú–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –≤ —á—ë–º —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ—Å—Ç—å? –°—É–¥ —É–∂–µ –±—ã–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –¥–æ–ª–≥–∞–º–∏?‚Äù
–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—É–∑—ã –∏ –º—è–≥–∫—É—é –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é: <break time="400ms" />, <emphasis level="moderate">, <prosody rate="medium">.
–ö–æ–≥–¥–∞ —É–≤–∏–¥–∏—à—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≥–æ—Ç–æ–≤ ‚Äî –¥–æ–±–∞–≤—å [openLeadForm], —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ, –Ω–æ –ù–ï –ì–û–í–û–†–ò —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω, –ø–æ–∫–∞ –æ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É!
–ü–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞, –Ω–µ –≥–æ–≤–æ—Ä–∏ ¬´–ó–∞–ø–∏—Å–∞–ª–∞¬ª –∏ –Ω–µ –æ–±–µ—â–∞–π –∑–≤–æ–Ω–∫–∞.
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã ‚Äî –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏, —É—Ç–æ—á–Ω–∏ –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫—É —É–¥–æ–±–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫, –∏ —Å–∫–∞–∂–∏ —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∂–µ—Ç—Å—è —é—Ä–∏—Å—Ç.
–ó–∞–≤–µ—Ä—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —è–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ—Ç¬ª, ¬´—Å–ø–∞—Å–∏–±–æ¬ª, ¬´–±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ¬ª).
–í—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã ‚Äî —Å–ø—Ä–æ—Å–∏, –º–æ–≥—É –ª–∏ —á–µ–º-—Ç–æ –µ—â—ë –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≥–æ–≤–æ—Ä–∏—Ç ¬´–Ω–µ—Ç¬ª, ¬´—Å–ø–∞—Å–∏–±–æ¬ª ‚Äî –ø–æ–ø—Ä–æ—â–∞–π—Å—è, –ø–æ—Å—Ç–∞–≤—å [endSession] –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞.
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã ‚Äî –ê–Ω–Ω–∞, –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫.
`;

app.post("/gpt", async (req, res) => {
  try {
    const messages = Array.isArray(req.body.messages) ? req.body.messages : [];

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ—Ä–æ—Ç–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if (messages.length === 1) {
      const msg = messages[0]?.content?.toLowerCase() || "";
      const isGreeting = /–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä—ã–π|–º–æ–∂–Ω–æ|–∞–ª–ª–æ|—Å–ª—É—à–∞—é/i.test(msg);
      const isNeutral = msg.length < 20;

      if (isGreeting || isNeutral) {
        return res.json({
          choices: [
            {
              message: {
                role: "assistant",
                content: `<prosody rate="medium">–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. <break time="300ms" /> –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å?</prosody>`,
                triggerForm: false,
                endSession: false
              }
            }
          ]
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–Ω–µ—Ç" –∏–ª–∏ "—Å–ø–∞—Å–∏–±–æ"
    const userMsg = messages.at(-1)?.content?.toLowerCase() || "";
    if (/^(–Ω–µ—Ç|—Å–ø–∞—Å–∏–±–æ|–±–æ–ª—å—à–µ\s*–Ω–∏—á–µ–≥–æ)/i.test(userMsg.trim())) {
      return res.json({
        choices: [
          {
            message: {
              role: "assistant",
              content: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. <break time='400ms'/> –ï—Å–ª–∏ —á—Ç–æ ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å üòä",
              triggerForm: false,
              endSession: true // —Ñ–ª–∞–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
            }
          }
        ]
      });
    }

    const chatMessages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...messages.slice(-10)
    ];

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4.1-nano",
        messages: chatMessages,
        temperature: 0.7,
        max_tokens: 200
      })
    });

    const data = await openaiRes.json();

    const fullContent = data.choices?.[0]?.message?.content || "";
    const strippedContent = fullContent
      .replace("[openLeadForm]", "")
      .replace("[endSession]", "")
      .trim();

    // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
    const triggerForm = fullContent.includes("[openLeadForm]");
    const endSession = fullContent.includes("[endSession]");

    res.json({
      choices: [
        {
          message: {
            role: "assistant",
            content: strippedContent,
            triggerForm,
            endSession
          }
        }
      ]
    });

  } catch (e) {
    console.error("‚ùå GPT proxy error:", e);
    res.status(500).json({ error: "OpenAI Proxy error", details: e.message });
  }
});

// /lead ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
app.post("/lead", async (req, res) => {
  try {
    const { name, phone } = req.body;

    if (!name || !phone) {
      return res.status(400).json({ error: "–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const gptLeadMessage = [
      { role: "system", content: SYSTEM_PROMPT },
      { role: "user", content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É: –ò–º—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}` }
    ];

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫ (—ç–º—É–ª–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è UX)
    await new Promise(r => setTimeout(r, 1500));

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4.1-nano",
        messages: gptLeadMessage,
        temperature: 0.6,
        max_tokens: 120
      })
    });

    const data = await openaiRes.json();
    let text = data.choices?.[0]?.message?.content || 
      "–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —é—Ä–∏—Å—Ç. –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫? –ú–æ–≥—É –ª–∏ –µ—â—ë —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?";

    // –ï—Å–ª–∏ GPT –≤—Å—Ç–∞–≤–∏–ª [endSession] ‚Äî —Å–æ–æ–±—â–∞–µ–º —Ñ—Ä–æ–Ω—Ç—É
    const endSession = text.includes("[endSession]");
    text = text.replace("[endSession]", "").trim();

    res.json({ message: text, endSession });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("‚úÖ GPT voice server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
});
