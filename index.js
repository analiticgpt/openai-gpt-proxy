import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_KEY = process.env.OPENAI_KEY;

const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ê–Ω–Ω–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å–ø–∏—Å–∞—Ç—å –¥–æ–ª–≥–∏ —á–µ—Ä–µ–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ.
–¢—ã –≤–∫–ª—é—á–∞–µ—à—å—Å—è, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è ‚Äî –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏: —Ç–µ–ø–ª–æ, –ø—Ä–æ—Å—Ç–æ, –ø–æ –¥–µ–ª—É. –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
–ù–µ –∑–∞—á–∏—Ç—ã–≤–∞–π –∑–∞–∫–æ–Ω—ã, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ì–æ–≤–æ—Ä–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å.
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. –ù–µ –≤—ã–≤–∞–ª–∏–≤–∞–π –≤—Å—ë —Å—Ä–∞–∑—É.
–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª ‚Äî —Å–ø—Ä–æ—Å–∏: 
‚Äú–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –≤ —á—ë–º —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ—Å—Ç—å? –°—É–¥ —É–∂–µ –±—ã–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –¥–æ–ª–≥–∞–º–∏?‚Äù
–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—É–∑—ã –∏ –º—è–≥–∫—É—é –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é: <break time="400ms" />, <emphasis level="moderate">, <prosody rate="medium">.
–í –∫–æ–Ω—Ü–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–ø–∏—Å—å: ‚Äú–ú–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî —é—Ä–∏—Å—Ç –≤—Å—ë —Ä–∞–∑–ª–æ–∂–∏—Ç –ø–æ –ø–æ–ª–æ—á–∫–∞–º.‚Äù
–ó–∞–≤–µ—Ä—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä: ‚Äú<break time='300ms' /> –ó–∞–ø–∏—Å–∞–ª–∞. –ñ–¥–∏—Ç–µ –∑–≤–æ–Ω–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ 8‚ÄØ800‚ÄØ600‚ÄØ38‚ÄØ23.‚Äù
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã ‚Äî –ê–Ω–Ω–∞, –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫.
`;

app.post("/gpt", async (req, res) => {
  try {
    let messages = req.body.messages || [];

    if (!Array.isArray(messages)) {
      return res.status(400).json({ error: "Invalid message history" });
    }

    // üëá –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messages.length === 1) {
      const userFirstMessage = messages[0]?.content?.toLowerCase() || "";
      const isGreeting = /–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä—ã–π|–º–æ–∂–Ω–æ|–∞–ª–ª–æ|—Å–ª—É—à–∞—é/i.test(userFirstMessage);
      const isNeutral = userFirstMessage.length < 20;

      const reply = isGreeting || isNeutral
        ? `<prosody rate="medium">–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. <break time="300ms" /> –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å?</prosody>`
        : null;

      if (reply) {
        return res.json({
          choices: [
            { message: { role: "assistant", content: reply } }
          ]
        });
      }
    }

    const recentMessages = messages.slice(-10);

    const chatMessages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...recentMessages
    ];

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4.1-nano",
        messages: chatMessages,
        temperature: 0.7,
        max_tokens: 100
      })
    });

    const data = await openaiRes.json();
    return res.json(data);

  } catch (e) {
    res.status(500).json({ error: "OpenAI Proxy error", details: e.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("‚úÖ GPT voice server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
});
